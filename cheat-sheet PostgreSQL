POSTGRESQL

# psql -U postgres -  выполнить подключение к базе данных Постгре SQL
# \l - получить список баз данных сервера
# \с dbname - выбрать базу данных
# \dt - список таблиц в текущей базе данных PostgreSQL
# \d table - Структура таблицы table
# \a - Переключение между режимами вывода
# \di - Индексы
# \dv - Представления
# \ds - Последовательности
# \dS - Системные таблицы
# \i - Чтение входящих данных из файла
# \o - Вывод результатов запроса в файл
# \pset - Настройка параметров форматирования
# \echo - Вывод сообщений
# \set - Установка переменных среды
# \? - Справочник psql
# \help - Справка команд SQL
# \q - Выход из консоли

Чтобы удалить все таблицы, в командной строке сервера вводим команду:
# psql -U postgresql-user -d postgresql-db -f /tmp/droptables

Снятие дампа БД PostgreSQL:
# pg_dump -c -h localhost -U myuser mydatabase > ./mydump.sql

Вот тот же вариант с IP вместо имени хоста:
# pg_dump -c -h 192.168.0.1 -U myuser mydatabase > ./dump.sql

Создание резервной копии с сжатием в gz:
# pg_dump -h localhost -O -F p -c -U myuser mydatabase | gzip -c > mydb.gz

Дамп данных только одной, конкретной таблицы:
# pg_dump -h localhost -U myuser -F c -b -v -t *pay* -f pay_tables.backup mydb

Если нужно создать резервную копию нескольких таблиц, то имена этих таблиц перечисляются с помощью ключа -t для каждой таблицы:
# pg_dump -a -t table_name -f file_name database_name

Восстановление из резервной копии:
# cat dump.sql | psql -h localhost mydatabase myuser
or
# createdb dbNameTest ; pg_dump -s -F c dbName | pg_restore -s -c -d dbNameTest


Импорт в PostgreSQL делается следующим образом:
# psql -h localhost -U username dbname < dump.sql

Конфигурационные файлы PostgreSQL находятся в:
# vim /var/lib/postgresql/8.4/data/postgresql.conf
# vim /var/lib/postgresql/8.4/data/pg_hba.conf



Примеры команд:

Вытащить нужные данные в файл:
psql -U taiga <<EOF> /tmp/file
> \c taiga
> select * from users_user where full_name ~ 'test';
> select * from users_user where username ~ 'astankevich';
> EOF

Вытащить конкретные столбцы из таблицы:
# select username,full_name from users_user;

Добавить строку в таблицу:
taiga=> insert into users_user (max_public_projects, max_private_projects) values (0, 0);

Обновить стоблец в таблице:
taiga=> UPDATE users_user SET max_private_projects = 0;
taiga=> UPDATE users_user SET max_public_projects = 0 WHERE max_public_projects = 1;
taiga=> UPDATE users_user SET max_private_projects = null WHERE username = 'admin';

Создать пользователя и базу:
createuser -U postgres gitea --interactive --pwprompt
createdb -U gitea gitea -O gitea

?Выдернуть первичные ключи
taiga=> select distinct table_name,column_name from information_schema.key_column_usage;

Подвисшие запросы:
SELECT  pid,  now() - pg_stat_activity.query_start AS duration,  query,  state FROM pg_stat_activity WHERE (now() - pg_stat_activity.query_start) > interval '4 hour';


Блокировки: (если в ps aux | grep postgres  есть процессы со статусом waiting)
postgres=# select pg_class.relname, pg_locks.locktype, pg_locks.database, pg_locks.relation, pg_locks.virtualtransaction, pg_locks.pid, pg_locks.mode, pg_locks.granted from pg_class, pg_locks where pg_class.relfilenode = pg_locks.relation order by pg_class.relname;



